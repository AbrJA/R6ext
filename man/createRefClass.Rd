% Generated by roxygen2 (4.0.0): do not edit by hand
\name{createRefClass}
\alias{createRefClass}
\title{Reference class generator, with all public members}
\usage{
createRefClass(classname, members = list(), parent_env = parent.frame(),
  lock = TRUE)
}
\arguments{
\item{classname}{Name of the class.}

\item{members}{A list of public members, which can be functions and
non-functions.}

\item{parent_env}{An environment to use as the parent of newly-created
objects.}

\item{lock}{Should the environments of the generated objects be locked?}
}
\description{
Classes created by this generator have the following properties:
\itemize{
  \item Has public members only (no private).
  \item Each object created by the generator's \code{$new} function is the
    public environment, with a class.
  \item Methods can directly access the public (or object) environment, by
    using \code{self$foo}. Assignment can be done with \code{<<-}, but it's
    more precise to explicitly use \code{self}.
  \item The execution environment of all methods is set to the public
    environment.
  \item Each instance of the class has its own copy of each method. I'm not
    sure how large the memory footprint is for this; each copy of a method
    is exactly the same except for the environment.
}
}
\examples{
Class4 <- createRefClass("Class4",
  members = list(
    x = 1,
    y = 2,
    initialize = function(x = NULL, y = NULL) {
      if (!is.null(x)) self$x <- x
      if (!is.null(y)) self$y <- y
    },
    # Set a variable
    set_x = function(value) self$x <- value,
    # Set a variable with <<-
    set_y = function(value) y <<- value,
    # Access variables
    sum_xy = function() x + y,
    # Access variables and a method
    sum_xy2 = function() x + y + sum_xy()
  )
)

# Create a new object with a specified value for y
z <- Class4$new(y = 10)

z$sum_xy()
z$x <- 20    # Set member directly
z$sum_xy()
z$set_x(40)  # Set member with setter function
z$set_y(60)
z$sum_xy()
z$sum_xy2()

# Print, using the print.RefClass method:
print(z)
}

