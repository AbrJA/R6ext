% Generated by roxygen2 (4.0.1): do not edit by hand
\name{createExternalMethodClass}
\alias{createExternalMethodClass}
\title{Create a class with non-reference semantics and externally-stored methods}
\usage{
createExternalMethodClass(classname = NULL, members = list(),
  methods = NULL, inherit = NULL, lock = TRUE, parent_env = NULL)
}
\arguments{
\item{classname}{Name of the class.}

\item{members}{A list of members, which can be functions and non-functions.}

\item{methods}{A list of methods for the class.}

\item{inherit}{A ExternalMethodClass object to inherit from (a superclass).}

\item{lock}{Should the methods for this class be locked? If locked, it won't
be possible to add more methods later.}

\item{parent_env}{The enclosing environment to use for the methods. If
\code{NULL}, keep the methods' existing enclosing environment.}
}
\description{
Create a class with non-reference semantics and externally-stored methods
}
\examples{
AnimalHerd <- createExternalMethodClass("AnimalHerd",
  members = list(
    animal = "buffalo",
    count = 0
  ),
  methods = list(
    initialize = function(self, count = 0) {
      self$count <- count
      self
    },
    view = function(self) {
      paste(rep(self$animal, self$count), collapse = " ")
    },
    reproduce = function(self, mult = 2) {
      self$count <- self$count * mult
      invisible(self)
    }
  ),
  lock = FALSE
)

herd <- AnimalHerd$new(2)
herd$view()
# "buffalo buffalo"

herd$reproduce()
# No change to herd because it doesn't have reference semantics
herd$view()
# "buffalo buffalo"

# Need to save it back into the variable if we want to store the result
herd <- herd$reproduce()
herd$view()
# "buffalo buffalo buffalo buffalo"

# Methods that return self are chainable
herd$reproduce()$view()
# "buffalo buffalo buffalo buffalo buffalo buffalo buffalo buffalo"

# Can add methods after the class has already been created, because we
# used lock = FALSE
AnimalHerd$methods$grow <- function(self) {
  self$animal <- toupper(self$animal)
  self
}

herd$grow()$view()
# "BUFFALO BUFFALO BUFFALO BUFFALO"


# Inheritance
Person <- createExternalMethodClass("Person",
  members = list(
    name = NA,
    hair = NA
  ),
  methods = list(
    initialize = function(self, name, hair = NA) {
      self$name <- name
      self$hair <- hair
      self$greet()
      self
    },
    greet = function(self) {
      cat(paste0("Hello, my name is ", self$name, ".\\n"))
    }
  )
)
ann <- Person$new("Ann", "black")
# Hello, my name is Ann.
ann$hair
# "black"


Lumberjack <- createExternalMethodClass("Lumberjack",
  inherit = Person,
  members = list(
    beard = NA
  ),
  methods = list(
    initialize = function(self, name, hair = NA, beard = NA, super) {
      self <- super$initialize(name, hair)
      self$beard <- beard
      self
    },
    greet = function(self) {
      cat(paste("I'm a lumberjack and I'm OK.\\n"))
    }
  )
)
jim <- Lumberjack$new("Jim", "red", "bushy")
# I'm a lumberjack and I'm OK.
jim$hair
# "red"
jim$beard
# "bushy"
}

