% Generated by roxygen2 (4.0.0): do not edit by hand
\name{createRefClass2}
\alias{createRefClass2}
\title{Reference class generator, with private and public members}
\usage{
createRefClass2(classname = NULL, private = list(), public = list(),
  parent_env = parent.frame(), lock = TRUE)
}
\arguments{
\item{classname}{Name of the class.}

\item{private}{A list of private members, which can be functions and
non-functions.}

\item{public}{A list of public members, which can be functions and
non-functions.}

\item{parent_env}{An environment to use as the parent of newly-created
objects.}

\item{lock}{Should the environments of the generated objects be locked?}
}
\description{
Classes created by this generator have the following properties:
\itemize{
  \item Has private and public members.
  \item The private environment is the parent of the public environment.
  \item Each object created by the generator's \code{$new} function is the
    public environment, with a class.
  \item Methods can directly access the public and private environments, by
    using \code{public$foo} or \code{private$foo}. Assignment to either
    environment can be done with \code{<<-}, but it's more precise to
    explicitly specify \code{private} or \code{public}.
  \item The execution environment of all methods is set to the public
    environment, even if it's a private method. Private methods are found
    in the private environment, but they have the public environment as
    their execution environment.
  \item Each instance of the class has its own copy of each method. I'm not
    sure how large the memory footprint is for this; each copy of a method
    is exactly the same except for the environment.
}
}
\examples{
class5 <- createRefClass2("class5",
  private = list(
    x = 1,
    y = 2,
    sum_xz = function() x + z
  ),
  public = list(
    z = 3,
    initialize = function(x = NULL, y = NULL, z = NULL) {
      if (!is.null(x)) private$x <- x
      if (!is.null(y)) private$y <- y
      if (!is.null(z)) public$z  <- z
    },
    # Set a private variable
    set_x = function(value) private$x <- value,
    # Access private and public variables
    sum_xyz = function() x + y + z,
    # Access a private variable and private method
    sum_xyz2 = function() y + sum_xz()
  )
)

z <- class5$new(11, z = 13)

z$sum_xyz()
z$sum_xyz2()
z$x <- 20    # Error - can't access private member directly
z$set_x(20)
z$sum_xyz()
z$sum_xyz2()
z$z <- 100   # Can set public members directly
z$sum_xyz()

# Print, using the print.RefClass2 method:
print(z)
}

